{"version":3,"sources":["components/Card.js","components/CardList.js","redux/actions.js","components/SearchField.js","App.js","redux/reducers.js","index.js"],"names":["Card","props","console","log","robotinfo","name","email","username","id","className","src","alt","CardList","robots","map","user","i","CHANGE_SEARCH_FIELD","ROBOTS","LOADING","FAILED","setSearchField","text","type","payload","connect","dispatch","onInputChange","e","target","value","placeholder","onChange","App","handleChange","setState","searchField","this","loadRobots","isLoading","filterRobots","filter","item","toLowerCase","includes","style","textAlign","React","Component","state","searchRobots","requestRobots","error","fetch","then","res","json","data","catch","initSearchState","initRobotState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c5d1184.chunk.js","sourcesContent":["const Card = (props) => {\n\tconsole.log(props)\n\tconst {robotinfo} = props;\n\tconsole.log(robotinfo);\n\tconst {name,email,username,id} = robotinfo;\n\treturn (\n    \t<>\n\t\t\t<div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n\t\t\t\t<img src={`https://robohash.org/${id}/?size=200x200`} alt='robot' />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t\t<p>{username}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n    \t</>\n  \t)\n}\nexport default Card;","import Card from './Card';\n\nconst CardList = (props) => {\n\tconst { robots } = props;\n\treturn (\n\t\t<div className='flexme'>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\tconsole.log(user, i)\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card robotinfo={user} />\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardList;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const ROBOTS = 'ROBOTS';\nexport const LOADING = 'LOADING';\nexport const FAILED = 'FAILED';\n\nexport const setSearchField = (text) => ({\n\ttype: 'CHANGE_SEARCH_FIELD',\n\tpayload: text //payload sends the data to the reducer\n})\n\nexport const fetchRobots = () => (dispatch) => {\n\tdispatch({ type: LOADING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(res => res.json())\n\t\t.then(data => {\n\t\t\tdispatch({ type: ROBOTS, payload: data })\n\t\t})\n\t\t.catch(error => {\n\t\t\tdispatch({ type: FAILED, payload: error })\n\t})\n}","import { connect } from 'react-redux';\nimport { setSearchField } from '../redux/actions';\n\nconst SearchBox = (props) => {\n  \tconst { onInputChange } = props; //onChange variation also depends on this line not being included\n  \treturn (\n    \t<div className=\"pa2\">\n     \t\t<input type=\"text\"\n          \t\tplaceholder=\"Search Robot...\"\n          \t\tclassName=\"pa3 br3 ba b--green bg-lightest-blue custom\"\n\t\t\t\tonChange={onInputChange}  //can also dispatch here onChange = (e) => props.dispatch(handleSelect(e.target.value))\n\t\t\t/>\n    \t</div>\n  \t)\n}\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\t//callback function to handle event\n\t\tonInputChange: (e) => dispatch(setSearchField(e.target.value))\n\t}\n}\n//above onchange variation works only if dispatch is not included below ( connect()(searchBox) )\nexport default connect(null, mapDispatchToProps)(SearchBox);","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchField';\nimport { fetchRobots } from './redux/actions';\nimport './App.css';\nimport { setSearchField } from './redux/actions';\n\nclass App extends React.Component {\n\n\tcomponentDidMount(props) {\n\t\tconsole.log(props)\n\t\tthis.props.loadRobots();\n\t}\n\thandleChange = (e) => {\n\t\t// const { searchField } = this.state;\n\t\tthis.setState({ searchField: e.target.value })\n\t\t// this.inputText = e.target.value;\n\t}\n\trender() {\n\t\t//   const { robots, searchField } = this.state;\n\t\tconst { searchField, robots, isLoading } = this.props;\n\t\tconsole.log(searchField);\n\t\tconst filterRobots = robots.filter(item => {\n\t\t\treturn item.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\t\treturn isLoading ?\n\t\t\t<h1 style={{textAlign: 'center'}}>Loading...</h1> :\n\t\t\t(\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox onInputChange={this.handleChange} />\n\t\t\t\t\t<CardList robots={filterRobots} />\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\tconst mapStateToProps = (state) => {\n\t\treturn {\n\t\t\tsearchField: state.searchRobots.searchField,\n\t\t\trobots: state.requestRobots.robots,\n\t\t\tisLoading: state.requestRobots.isLoading,\n\t\t\terror: state.requestRobots.error\n\t\t}\n\t}\n\tconst mapDispatchToProps = (dispatch) => {\n\t\treturn {\n\t\t\tonInputChange: (e) => dispatch(setSearchField(e.target.value)),\n\t\t\tloadRobots: () => dispatch(fetchRobots())\n\t\t}\n\t}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD, ROBOTS, LOADING, FAILED } from './actions';\n\nlet initSearchState = {\n\tsearchField: ''\n\n}\nlet initRobotState = {\n\trobots: [],\n\tisLoading: false\n}\n\nexport const searchRobots = (state = initSearchState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn { ...state, searchField: action.payload };\n\t\tdefault:\n\t\t\treturn { ...state };\n\t}\n}\nexport const requestRobots = (state = initRobotState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase LOADING:\n\t\t\treturn { ...state, isLoading: true }\n\t\tcase ROBOTS:\n\t\t\treturn { ...state, robots: action.payload, isLoading: false };\n\t\tcase FAILED:\n\t\t\treturn { ...state, error: action.payload, isLoading: false }\n\t\tdefault:\n\t\t\treturn { ...state }\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport 'tachyons';\n\nimport { searchRobots, requestRobots } from './redux/reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n\t\t<App />\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}